{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Scoringrules: probabilistic forecast evaluation","text":"<p>Scoringrules is a python library for evaluating probabilistic forecasts by computing scoring rules and other diagnostic quantities. It aims to assist forecasting practitioners by providing a set of tools based the scientific literature and via its didactic approach.</p>"},{"location":"api/brier/","title":"Brier Score","text":""},{"location":"api/brier/#scoringrules.brier_score","title":"<code>scoringrules.brier_score(forecasts: ArrayLike, observations: ArrayLike, /, *, backend: ArrayLike = 'numpy') -&gt; ArrayLike</code>","text":"<p>Compute the Brier Score (BS).</p> <p>The BS is formulated as</p> \\[BS(f, y) = (f - y)^2,\\] <p>where \\(f \\in [0, 1]\\) is the predicted probability of an event and \\(y \\in \\{0, 1\\}\\) the actual outcome.</p> <p>Parameters:</p> Name Type Description Default <code>forecasts</code> <code>NDArray</code> <p>Forecasted probabilities between 0 and 1.</p> required <code>observations</code> <code>ArrayLike</code> <p>Observed outcome, either 0 or 1.</p> required <code>backend</code> <p>The name of the backend used for computations. Defaults to 'numpy'.</p> <code>'numpy'</code> <p>Returns:</p> Name Type Description <code>brier_score</code> <code>NDArray</code> <p>The computed Brier Score.</p>"},{"location":"api/energy/","title":"Energy Score","text":""},{"location":"api/energy/#scoringrules.energy_score","title":"<code>scoringrules.energy_score(forecasts: Array, observations: Array, /, *, m_axis: int = -2, v_axis: int = -1, backend: int = 'numba') -&gt; Array</code>","text":"<p>Compute the Energy Score for a finite multivariate ensemble.</p> <p>The Energy Score is a multivariate scoring rule expressed as</p> \\[ES(F, \\mathbf{y}) = E_{F} ||\\mathbf{X} - \\mathbf{y}|| - \\frac{1}{2}E_{F} ||\\mathbf{X} - \\mathbf{X'}||,\\] <p>where \\(\\mathbf{X}\\) and \\(\\mathbf{X'}\\) are independent samples from \\(F\\) and \\(||\\cdot||\\) is the euclidean norm over the input dimensions (the variables).</p> <p>Parameters:</p> Name Type Description Default <code>forecasts</code> <code>Array</code> <p>The predicted forecast ensemble, where the ensemble dimension is by default represented by the second last axis and the variables dimension by the last axis.</p> required <code>observations</code> <code>Array</code> <p>The observed values, where the variables dimension is by default the last axis.</p> required <code>m_axis</code> <code>int</code> <p>The axis corresponding to the ensemble dimension. Defaults to -2.</p> <code>-2</code> <code>v_axis</code> <code>int</code> <p>The axis corresponding to the variables dimension. Defaults to -1.</p> <code>-1</code> <code>backend</code> <p>The name of the backend used for computations. Defaults to 'numba' if available, else 'numpy'.</p> <code>'numba'</code> <p>Returns:</p> Name Type Description <code>energy_score</code> <code>ArrayLike of shape (...)</code> <p>The computed Energy Score.</p>"},{"location":"api/variogram/","title":"Variogram Score 1","text":"<ol> <li> <p>Michael Scheuerer and Thomas M. Hamill. Variogram-Based Proper Scoring Rules for Probabilistic Forecasts of Multivariate Quantities. Monthly Weather Review, 2015. URL: https://journals.ametsoc.org/view/journals/mwre/143/4/mwr-d-14-00269.1.xml, doi:10.1175/MWR-D-14-00269.1.\u00a0\u21a9</p> </li> </ol>"},{"location":"api/variogram/#scoringrules.variogram_score","title":"<code>scoringrules.variogram_score(forecasts: Array, observations: Array, p: float = 1.0, m_axis: int = -2, v_axis: int = -1, backend: int = 'numba') -&gt; Array</code>","text":"<p>Compute the Variogram Score for a finite multivariate ensemble.</p> <p>For a \\(D\\)-variate ensemble the Variogram Score (Sheuerer and Hamill, 2015) of order \\(p\\) is expressed as</p> \\[VS(F, \\mathbf{y}) = \\sum_{i,j=1}^{D}(|y_i - y_j|^p - E_F|X_i - X_j|^p)^2 ,\\] <p>where \\(\\mathbf{X}\\) and \\(\\mathbf{X'}\\) are independently sampled ensembles from from \\(F\\).</p> <p>Parameters:</p> Name Type Description Default <code>forecasts</code> <code>Array</code> <p>The predicted forecast ensemble, where the ensemble dimension is by default represented by the second last axis and the variables dimension by the last axis.</p> required <code>observations</code> <code>Array</code> <p>The observed values, where the variables dimension is by default the last axis.</p> required <code>p</code> <code>float</code> <p>The order of the Variogram Score. Typical values are 0.5, 1.0 or 2.0. Defaults to 1.0.</p> <code>1.0</code> <code>m_axis</code> <code>int</code> <p>The axis corresponding to the ensemble dimension. Defaults to -2.</p> <code>-2</code> <code>v_axis</code> <code>int</code> <p>The axis corresponding to the variables dimension. Defaults to -1.</p> <code>-1</code> <code>backend</code> <p>The name of the backend used for computations. Defaults to 'numba' if available, else 'numpy'.</p> <code>'numba'</code> <p>Returns:</p> Name Type Description <code>variogram_score</code> <code>Array</code> <p>The computed Variogram Score.</p>"},{"location":"api/crps/","title":"Continuous Ranked Probability Score","text":"<p>Formally, the CRPS is expressed as</p> \\[\\text{CRPS}(F, y) = \\int_{\\mathbb{R}}[F(x)-\\mathbb{1}\\{y \\le x\\}]^2 dx\\] <p>where \\(F(x) = P(X&lt;x)\\) is the forecast CDF and \\(\\mathbb{1}\\{x \\le y\\}\\) the empirical CDF of the scalar observation \\(y\\). \\(\\mathbb{1}\\) is the indicator function. The CRPS can also be viewed as the Brier score integrated over all real-valued thresholds.</p> <p></p>"},{"location":"api/crps/#ensemble-based-estimators","title":"Ensemble-based estimators","text":"<p>When the true forecast CDF is not fully known, but represented by a finite ensemble, the CRPS can be estimated with some error. Several estimators exist and they are implemented in <code>scoringrules</code>. For a thorough review of CRPS estimators and their respective biases, refer to Zamo and Naveau (2018)1 and Jordan (2016)2.</p>"},{"location":"api/crps/#integral-form-int","title":"Integral form (INT)","text":"<p>The numerical approximation of the cumulative integral over the finite ensemble.</p> \\[ \\text{CRPS}_{\\text{INT}}(M, y) = \\int_{\\mathbb{R}} \\left[ \\frac{1}{M} \\sum_{i=1}^M \\mathbb{1}\\{x_i \\le x \\} - \\mathbb{1}\\{y \\le x\\}  \\right] ^2 dx \\] <p>Runs with \\(O(m\\cdot\\mathrm{log}m)\\) complexity, including the sorting of the ensemble.</p>"},{"location":"api/crps/#energy-form-nrg","title":"Energy form (NRG)","text":"<p>Introduced by Gneiting and Raftery (2007)3:</p> \\[ \\text{CRPS}_{\\text{NRG}}(M, y) = \\frac{1}{M} \\sum_{i=1}^{M}|x_i - y| - \\frac{1}{2 M^2}\\sum_{i,j=1}^{M}|x_i - x_j|\\] <p>It is called the \"energy form\" because it is the one-dimensional case of the Energy Score.</p> <p>Runs with \\(O(m^2)\\) complexity.</p>"},{"location":"api/crps/#quantile-decomposition-form-qd","title":"Quantile decomposition form (QD)","text":"<p>Introduced by Jordan (2016)2:</p> \\[\\mathrm{CRPS}_{\\mathrm{QD}}(M, y) = \\frac{2}{M^2} \\sum_{i=1}^{M}(x_i - y)\\left[M\\mathbb{1}\\{y \\le x_i\\} - i + \\frac{1}{2} \\right]\\] <p>Runs with \\(O(m\\cdot\\mathrm{log}m)\\) complexity, including the sorting of the ensemble.</p>"},{"location":"api/crps/#probability-weighted-moment-form-pwm","title":"Probability weighted moment form (PWM)","text":"<p>Introduced by Taillardat et al. (2016)4:</p> \\[\\mathrm{CRPS}_{\\mathrm{NRG}}(M, y) = \\frac{1}{M} \\sum_{i=1}^{M}|x_i - y| + \\hat{\\beta_0} - 2\\hat{\\beta_1},\\] <p>where \\(\\hat{\\beta_0} = \\frac{1}{M} \\sum_{i=1}^{M}x_i\\) and \\(\\hat{\\beta_1} = \\frac{1}{M(M-1)} \\sum_{i=1}^{M}(i - 1)x_i\\). Runs with \\(O(m\\cdot\\mathrm{log}m)\\) complexity, including the sorting of the ensemble.</p> <p></p> <ol> <li> <p>Micha\u00ebl Zamo and Philippe Naveau. Estimation of the Continuous Ranked Probability Score with Limited Information and Applications to Ensemble Weather Forecasts. Mathematical Geosciences, 2018. URL: https://doi.org/10.1007/s11004-017-9709-7, doi:10.1007/s11004-017-9709-7.\u00a0\u21a9</p> </li> <li> <p>Alexander Jordan. Facets of forecast evaluation. PhD thesis, Karlsruher Institut f\u00fcr Technologie (KIT), 2016. doi:10.5445/IR/1000063629.\u00a0\u21a9\u21a9</p> </li> <li> <p>Tilmann Gneiting and Adrian E Raftery. Strictly Proper Scoring Rules, Prediction, and Estimation. Journal of the American Statistical Association, 2007. URL: https://doi.org/10.1198/016214506000001437, doi:10.1198/016214506000001437.\u00a0\u21a9</p> </li> <li> <p>Maxime Taillardat, Olivier Mestre, Micha\u00ebl Zamo, and Philippe Naveau. Calibrated Ensemble Forecasts Using Quantile Regression Forests and Ensemble Model Output Statistics. Monthly Weather Review, 2016. URL: http://journals.ametsoc.org/doi/10.1175/MWR-D-15-0260.1, doi:10.1175/MWR-D-15-0260.1.\u00a0\u21a9</p> </li> </ol>"},{"location":"api/crps/analytical/","title":"Analytical formulations","text":""},{"location":"api/crps/analytical/#scoringrules.crps_normal","title":"<code>scoringrules.crps_normal(mu: ArrayLike, sigma: ArrayLike, observation: ArrayLike, /, *, backend: str = 'numpy') -&gt; ArrayLike</code>","text":"<p>Compute the closed form of the CRPS for the normal distribution.</p> <p>It is based on the following formulation from Geiting et al. (2005):</p> \\[ \\mathrm{CRPS}(\\mathcal{N}(\\mu, \\sigma), y) = \\sigma \\Bigl\\{ \\omega [\\Phi(\u03c9) - 1] + 2 \\phi(\\omega) - \\frac{1}{\\sqrt{\\pi}} \\Bigl\\},\\] <p>where \\(\\Phi(\u03c9)\\) and \\(\\phi(\u03c9)\\) are respectively the CDF and PDF of the standard normal distribution at the normalized prediction error \\(\\omega = \\frac{y - \\mu}{\\sigma}\\).</p> <p>Parameters:</p> Name Type Description Default <code>mu</code> <code>ArrayLike</code> <p>Mean of the forecast normal distribution.</p> required <code>sigma</code> <code>ArrayLike</code> <p>Standard deviation of the forecast normal distribution.</p> required <code>observation</code> <code>ArrayLike</code> <p>The observed values.</p> required <p>Returns:</p> Name Type Description <code>crps</code> <code>array_like</code> <p>The CRPS between Normal(mu, sigma) and obs.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from scoringrules import crps\n&gt;&gt;&gt; crps.normal(0.1, 0.4, 0.0)\n</code></pre>"},{"location":"api/crps/analytical/#scoringrules.crps_lognormal","title":"<code>scoringrules.crps_lognormal(mulog: ArrayLike, sigmalog: ArrayLike, observation: ArrayLike, backend: str = 'numpy') -&gt; ArrayLike</code>","text":"<p>Compute the closed form of the CRPS for the lognormal distribution.</p> <p>It is based on the formulation introduced by Baran and Lerch (2015)</p> \\[ \\mathrm{CRPS}(\\mathrm{log}\\mathcal{N}(\\mu, \\sigma), y) = y [2 \\Phi(y) - 1] - 2 \\mathrm{exp}(\\mu + \\frac{\\sigma^2}{2}) \\left[ \\Phi(\\omega - \\sigma) + \\Phi(\\frac{\\sigma}{\\sqrt{2}}) \\right]\\] <p>where \\(\\Phi\\) is the CDF of the standard normal distribution and \\(\\omega = \\frac{\\mathrm{log}y - \\mu}{\\sigma}\\).</p> <p>Parameters:</p> Name Type Description Default <code>mulog</code> <code>ArrayLike</code> <p>Mean of the normal underlying distribution.</p> required <code>sigmalog</code> <code>ArrayLike</code> <p>Standard deviation of the underlying normal distribution.</p> required <p>Returns:</p> Name Type Description <code>crps</code> <code>ArrayLike</code> <p>The CRPS between Lognormal(mu, sigma) and obs.</p>"},{"location":"api/crps/analytical/#scoringrules.crps_lognormal--notes","title":"Notes","text":"<p>The mean and standard deviation are not the values for the distribution itself, but of the underlying normal distribution it is derived from.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from scoringrules import crps\n&gt;&gt;&gt; crps.lognormal(0.1, 0.4, 0.0)\n</code></pre>"},{"location":"api/crps/ensemble/","title":"Ensemble-based estimation","text":""},{"location":"api/crps/ensemble/#scoringrules.crps_ensemble","title":"<code>scoringrules.crps_ensemble(forecasts: Array, observations: ArrayLike, /, *, axis: int = -1, sorted_ensemble: bool = False, estimator: str = 'pwm', backend: str = 'numba') -&gt; Array</code>","text":"<p>Estimate the Continuous Ranked Probability Score (CRPS) for a finite ensemble.</p> <p>Parameters:</p> Name Type Description Default <code>forecasts</code> <code>Array</code> <p>The predicted forecast ensemble, where the ensemble dimension is by default represented by the last axis.</p> required <code>observations</code> <code>ArrayLike</code> <p>The observed values.</p> required <code>axis</code> <code>int</code> <p>The axis corresponding to the ensemble. Default is the last axis.</p> <code>-1</code> <code>sorted_ensemble</code> <code>bool</code> <p>Boolean indicating whether the ensemble members are already in ascending order. Default is False.</p> <code>False</code> <code>estimator</code> <code>str</code> <p>Indicates the CRPS estimator to be used.</p> <code>'pwm'</code> <code>backend</code> <code>str</code> <p>The name of the backend used for computations. Defaults to 'numba' if available, else 'numpy'.</p> <code>'numba'</code> <p>Returns:</p> Name Type Description <code>crps</code> <code>ArrayLike</code> <p>The CRPS between the forecast ensemble and obs.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from scoringrules import crps\n&gt;&gt;&gt; crps.ensemble(pred, obs)\n</code></pre>"}]}